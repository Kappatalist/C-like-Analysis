import java.util.Random;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.Calendar;
import java.text.SimpleDateFormat;
import org.apache.commons.math3.special.*;
import org.apache.commons.math3.analysis.function.*;

public class Complex {
	double runtime;
	long mem_usage;
	double cpu_usage;

	int ITERATIONS;
	
	Random RNG;

	public Complex(int iter)
	{
		ITERATIONS = iter;
	}

	public double decirand()
	{
		return RNG.nextInt() / RNG.nextDouble();
	}
	
	public void RunComplex()
	{
		Universal universal = new Universal();

		RNG = new Random();
		Acosh acosh = new Acosh();
		Asinh asinh = new Asinh();
		Atanh atanh = new Atanh();
		double val;
		
		long start_time = System.nanoTime();

		for (int i = 0; i < ITERATIONS; i++)
		{
			Math.cos(decirand());
			Math.sin(decirand());
			Math.tan(decirand());
			Math.acos(decirand());
			Math.asin(decirand());
			Math.atan(decirand());
			Math.atan2(decirand(), decirand());
			Math.cosh(decirand());
			Math.sinh(decirand());
			Math.tanh(decirand());
			acosh.value(decirand());
			asinh.value(decirand());
			atanh.value(decirand());
			Math.exp(decirand());
			Math.log(decirand());
			Math.log10(decirand());
			Math.pow(decirand(), 2);
			Math.pow(decirand(), RNG.nextInt());
			Math.sqrt(decirand());
			Math.cbrt(decirand());
			Math.hypot(decirand(), decirand());
			Erf.erf(decirand());
			Erf.erfc(decirand());
			Gamma.gamma(decirand());
			Gamma.logGamma(decirand());
			Math.round(decirand());
			Math.abs(decirand() * -1);
			val = (decirand() * decirand()) + decirand();
		}

		long end_time = System.nanoTime();

		mem_usage = universal.performanceCounter.getCommittedVirtualMemorySize();
		cpu_usage = universal.performanceCounter.getProcessCpuLoad() * 100;
		runtime = end_time - start_time;

		Calendar mCal = Calendar.getInstance();
		SimpleDateFormat mSDF = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss");
		String rightNow = mSDF.format(mCal.getTime());
		
		try
		{
			BufferedWriter fileout = new BufferedWriter(new FileWriter("out -java-.txt", true));
			
			fileout.write("\nCOMPLEX TEST @ " + rightNow);											fileout.newLine();
			fileout.write("\n\nIterations:\t" + String.valueOf(ITERATIONS));						fileout.newLine();
			fileout.write("\nRuntime (ns):\t" + String.valueOf(runtime / 1000000));					fileout.newLine();
			fileout.write("\nCPU used:\t" + String.valueOf(cpu_usage) + "%");						fileout.newLine();
			fileout.write("\nPhys. mem:\t" + String.valueOf(mem_usage / 1000000.0f) + " MB\n\n");	fileout.newLine();
			
			fileout.close();
		}
		catch (Exception e)
		{
			System.out.println("Opening output file failed. Discarding results.");
		}
	}
}
